syntax = "proto3";

service Worker {
    rpc LaunchTask(LaunchTaskRequest) returns (LaunchTaskResponse) {}
    rpc KillTask(KillTaskRequest) returns (KillTaskResponse) {}
    rpc GetThroughputs(GetThroughputsRequest) returns (GetThroughputsResponse) {}
    rpc RegisterIterator(RegisterIteratorRequest) returns (RegisterIteratorResponse) {}
    rpc DeregisterIterator(DeregisterIteratorRequest) returns (DeregisterIteratorResponse) {}
    rpc GetStartTimestamp(GetStartTimestampRequest) returns (GetStartTimestampResponse) {}
}

message LaunchTaskRequest {
    int32 task_id = 1;
    int32 job_id = 2;
    string job_dir = 3;
    string task_dir = 4;
    repeated string download_exclude_list = 5;
    repeated int32 demand = 6;
    int32 shm_size = 7;
    string ip_address = 8;
    map<string, string> envs = 9;
    string job_name = 10;
    string task_name = 11;
}

message LaunchTaskResponse {
    int32 task_id = 1;
    bool success = 2;
    int32 fetch_delay = 3;
    int32 build_delay = 4;
}

message KillTaskRequest {
    int32 task_id = 1;
}

message KillTaskResponse {
    int32 task_id = 1;
    bool success = 2;
    int32 upload_delay = 3;
}

message GetThroughputsRequest {
}

message GetThroughputsResponse {
    bool success = 1;
    map<int32, float> throughputs = 2;
}

message RegisterIteratorRequest {
    int32 task_id = 1;
}

message RegisterIteratorResponse {
    bool success = 1;
}

message DeregisterIteratorRequest {
    int32 task_id = 1;
}

message DeregisterIteratorResponse {
    bool success = 1;
}

message GetStartTimestampRequest {
}

message GetStartTimestampResponse {
    bool success = 1;
    float start_timestamp = 2;
}