# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from rpc import master_pb2 as rpc_dot_master__pb2


class MasterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterWorker = channel.unary_unary(
                '/Master/RegisterWorker',
                request_serializer=rpc_dot_master__pb2.RegisterWorkerRequest.SerializeToString,
                response_deserializer=rpc_dot_master__pb2.RegisterWorkerResponse.FromString,
                )
        self.SendHeartbeat = channel.unary_unary(
                '/Master/SendHeartbeat',
                request_serializer=rpc_dot_master__pb2.SendHeartbeatRequest.SerializeToString,
                response_deserializer=rpc_dot_master__pb2.SendHeartbeatResponse.FromString,
                )
        self.TaskCompletion = channel.unary_unary(
                '/Master/TaskCompletion',
                request_serializer=rpc_dot_master__pb2.TaskCompletionRequest.SerializeToString,
                response_deserializer=rpc_dot_master__pb2.TaskCompletionResponse.FromString,
                )


class MasterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterWorker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendHeartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TaskCompletion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MasterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterWorker,
                    request_deserializer=rpc_dot_master__pb2.RegisterWorkerRequest.FromString,
                    response_serializer=rpc_dot_master__pb2.RegisterWorkerResponse.SerializeToString,
            ),
            'SendHeartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.SendHeartbeat,
                    request_deserializer=rpc_dot_master__pb2.SendHeartbeatRequest.FromString,
                    response_serializer=rpc_dot_master__pb2.SendHeartbeatResponse.SerializeToString,
            ),
            'TaskCompletion': grpc.unary_unary_rpc_method_handler(
                    servicer.TaskCompletion,
                    request_deserializer=rpc_dot_master__pb2.TaskCompletionRequest.FromString,
                    response_serializer=rpc_dot_master__pb2.TaskCompletionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Master', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Master(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Master/RegisterWorker',
            rpc_dot_master__pb2.RegisterWorkerRequest.SerializeToString,
            rpc_dot_master__pb2.RegisterWorkerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendHeartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Master/SendHeartbeat',
            rpc_dot_master__pb2.SendHeartbeatRequest.SerializeToString,
            rpc_dot_master__pb2.SendHeartbeatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TaskCompletion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Master/TaskCompletion',
            rpc_dot_master__pb2.TaskCompletionRequest.SerializeToString,
            rpc_dot_master__pb2.TaskCompletionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
